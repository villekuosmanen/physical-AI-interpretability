# Ruff configuration
line-length = 120
target-version = "py39"

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "archives",
]

[lint]
# Enable pycodestyle errors (`E`) and warnings (`W`), Pyflakes (`F`), isort (`I`), and
# other important rules
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "PL",  # pylint
]

# Ignore some rules that are too strict for AI/ML code
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", # Missing docstrings
    "D200", "D205", "D400", "D401", # Docstring formatting
    "E501", # Line too long (let black handle this)
    "N803", # Argument name should be lowercase (ML code often uses capital letters)
    "N806", # Variable in function should be lowercase
    "PLR0913", # Too many arguments in function definition
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901", # Too complex
    "B008", # Do not perform function calls in argument defaults
    "ARG002", # Unused method argument
    "SIM108", # Use ternary operator (not always clearer)
    "N812", # Lowercase imported as non-lowercase (common for F = functional)
]

# Allow fix for all fixable rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Tests can use magic values, assert, and unused imports
"**/test_*.py" = ["PLR2004", "S101", "F401"]
"**/tests/*.py" = ["PLR2004", "S101", "F401"]
# Scripts can have unused imports and magic values
"scripts/*.py" = ["F401", "PLR2004"]
"examples/*.py" = ["F401", "PLR2004"]

[lint.pydocstyle]
convention = "google"

[lint.isort]
known-first-party = ["src"]
force-single-line = true